@page "/equity-portfolio"
@inherits EquityPortfolioBase

@if(HoldingStocks != null)
{
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-sm-flex align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Portfolio</h6>
            <div>
                <button class="d-none d-sm-inline-block btn btn-sm btn-success shadow-sm" data-toggle="modal" data-target="#addStockModal">
                    <i class="fas fa-plus fa-sm text-white-50"></i> Add Stock
                </button>
                <button class="d-none d-sm-inline-block btn btn-sm btn-danger shadow-sm" data-toggle="modal" data-target="#removeStockModal">
                    <i class="fas fa-plus fa-sm text-white-50"></i> Remove Stock
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="d-sm-flex align-items-center justify-content-between mb-4">
                <div class="topbar dropdown no-arrow h-auto">
                    <a id="ddlPortfolioCategory" class="dropdown-toggle btn btn-primary" href="#" role="button"
                       data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span id="portfolioCategoryName"></span> &nbsp; <i class="fas fa-caret-down fa-sm text-white-50"></i>
                    </a>
                    <!-- Dropdown - Messages -->
                    <div class="dropdown-list dropdown-menu dropdown-menu-right shadow"
                     aria-labelledby="ddlPortfolioCategory">
                        <h6 class="dropdown-header">
                            Choose Watchlist
                        </h6>
                        
                        @foreach(var category in PortfolioStockCategories!)
                        {
                            <a class="dropdown-item d-flex align-items-center" onclick="@(() => GetHoldingStocks(category.Key, category.Value))">
                                <div class="dropdown-list-image mr-3">
                                    <img class="rounded-circle" src="img/undraw_profile_1.svg" alt="..." />
                                </div>
                                <div>@category.Value</div>
                                <input type="hidden" @ref="RefToCategoryId" value="@category.Key"/>
                            </a>
                        }
                    </div>
                </div>

                <div>
                    <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-success shadow-sm" data-toggle="modal" data-target="#addCategoryModal">
                        <i class="fas fa-plus fa-sm text-white-50"></i> Add New Category
                    </a>
                    <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-danger shadow-sm" data-toggle="modal" data-target="#deleteCategoryModal">
                        <i class="fas fa-plus fa-sm text-white-50"></i> Delete Category
                    </a>
                </div>
            </div>

            <div class="table-responsive">
                <QuickGrid Items="@HoldingStocks.AsQueryable()" Class="table table-bordered" ResizableColumns="true">
                    <TemplateColumn Title="Stock" SortBy="@SortByStockName">
                        <span>@context.StockName</span>
                    </TemplateColumn>
                    <TemplateColumn Title="Quantity" SortBy="@SortByStockQuantity">
                        <span>@context.Quantity</span>
                    </TemplateColumn>
                    <TemplateColumn Title="Average Price">
                        <span>@TypeCastingHelper.ConvertToMoney(MathHelper.GetTwoPrecisionDouble(context.AveragePrice), UtilsHelper.GetCurrencyUnicode(context.Currency!))</span>
                    </TemplateColumn>
                    <TemplateColumn Title="Total Investment" SortBy="@SortByStockInvestment">
                        <span>@TypeCastingHelper.ConvertToMoney(MathHelper.GetTwoPrecisionDouble(context.InvestedValue), UtilsHelper.GetCurrencyUnicode(context.Currency!))</span>
                    </TemplateColumn>
                    <TemplateColumn Title="CMP">
                        <span class="@(context.CurrentMarketPrice > context.AveragePrice ? ColorCodeClassNames.GridCellPositiveValue : ColorCodeClassNames.GridCellNegativeValue)">@TypeCastingHelper.ConvertToMoney(MathHelper.GetTwoPrecisionDouble(context.CurrentMarketPrice), UtilsHelper.GetCurrencyUnicode(context.Currency!))</span>
                    </TemplateColumn>
                    <TemplateColumn Title="Change %" SortBy="@SortByStockChange">
                        @{
                            string withoutSymbol = context.TodayChangePercentage!.EndsWith("%") ? context.TodayChangePercentage[..^2] : context.TodayChangePercentage;
                            double withoutSymbolValue = Math.Round(double.Parse(withoutSymbol!), 2);
                        }
                        <span class="@(withoutSymbolValue > 0 ? ColorCodeClassNames.GridCellPositiveValue : ColorCodeClassNames.GridCellNegativeValue)">@(withoutSymbolValue)%</span>
                    </TemplateColumn>
                    <TemplateColumn Title="Current Value" SortBy="@SortByStockCurrentValue">
                        <span class="@(context.CurrentValue > context.InvestedValue ? ColorCodeClassNames.GridCellPositiveValue : ColorCodeClassNames.GridCellNegativeValue)">@TypeCastingHelper.ConvertToMoney(MathHelper.GetTwoPrecisionDouble((double) context.CurrentValue!), UtilsHelper.GetCurrencyUnicode(context.Currency!))</span>
                    </TemplateColumn>
                    <TemplateColumn Title="P/L" SortBy="@SortByStockPL">
                        <span class="@(context.ProfitOrLossAmount > 0 ? ColorCodeClassNames.GridCellPositiveValue : ColorCodeClassNames.GridCellNegativeValue)">@TypeCastingHelper.ConvertToMoney(MathHelper.GetTwoPrecisionDouble((double) context.ProfitOrLossAmount!), UtilsHelper.GetCurrencyUnicode(context.Currency!))</span>
                    </TemplateColumn>
                    <TemplateColumn Title="P/L %" SortBy="SortByStockPLPercentage">
                        <span class="@(context.ProfitOrLossPercentage > 0 ? ColorCodeClassNames.GridCellPositiveValue : ColorCodeClassNames.GridCellNegativeValue)">@(Math.Round((double) context.ProfitOrLossPercentage!, 2))%</span>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>
    </div>

    <AddNewPortfolioCategory UserId="@nUserId" />
    <DeletePortfolioCategory UserId="@nUserId"></DeletePortfolioCategory>

    <AddStockModal UserId="@nUserId" />
    <RemoveStockModal UserId="@nUserId" HoldingStocks="@HoldingStocks" />
}
else
{
    <PreLoader/>
}